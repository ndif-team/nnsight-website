{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "89c55899",
   "metadata": {},
   "source": [
    "# Supervised Feature Selection: choosing the right unit of computation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66cbe869",
   "metadata": {},
   "source": [
    "By manipulating the components of a neural network in real-time, we can discover how these components represent abstract concepts. But **how do we know what unit of computation we should edit?** Should we change the entire residual stream? Only certain attention heads? Or the individual neurons themselves?\n",
    "\n",
    "In this tutorial, we'll look at the problem of **supervised feature selection**, or finding components in the model that localize specific concepts. We'll build up to Distributed Alignment Search (DAS), which automatically searches for a set of linear subspaces that represent a particular concept."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8efa58a3",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#FF9999;padding:10px 10px;border-radius:20px\">\n",
    "<b>Before we begin!</b>\n",
    "\n",
    "These are good things to know before we begin the tutorial\n",
    "<ul>\n",
    "<li>Activation patching - check out the activation patching tutorial <a href=\"https://nnsight.net/notebooks/tutorials/activation_patching/\">here</a>!</li>\n",
    "</ul>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37a2461d",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#C1E5F5;padding:10px 10px;border-radius:20px\">\n",
    "<b>Things we'll talk about</b>\n",
    "\n",
    "In case you want to tell people what you learned today!\n",
    "<ul>\n",
    "<li><a href=\"https://arxiv.org/abs/2402.17700\">RAVEL</a> - how to evaluate that we're only editing the concept we're looking for.</li>\n",
    "<li><a href=\"https://arxiv.org/abs/2303.02536\">DAS</a> - method for finding linear subspaces of model representations that store a particular concept.</li>\n",
    "</ul>\n",
    "\n",
    "Let's do this!\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6e1cbf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "\n",
    "try:\n",
    "    import google.colab\n",
    "    is_colab = True\n",
    "except ImportError:\n",
    "    is_colab = False\n",
    "\n",
    "if is_colab:\n",
    "    !pip install -U nnsight\n",
    "    !git clone https://github.com/AmirZur/nnsight-tutorials.git\n",
    "    %cd nnsight-tutorials/\n",
    "\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4317c4b3",
   "metadata": {},
   "source": [
    "## Activation Patching Review - editing a model's knowledge of geography"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1800b80c",
   "metadata": {},
   "source": [
    "We'll begin with a quick review of activation patching.\n",
    "\n",
    "When we tell an LLM we want to travel to Paris, the LLM knows that Paris is in France. Where is that information stored? In this notebook, we'll try to find out **where a language model stores the country information for a particular city.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6cf09f09",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load model\n",
    "import nnsight\n",
    "from IPython.display import clear_output\n",
    "\n",
    "model = nnsight.LanguageModel(\"meta-llama/Llama-3.2-1B\", device_map=\"auto\")\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa83985b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " France (0.65)\n",
      " the (0.05)\n",
      " love (0.01)\n"
     ]
    }
   ],
   "source": [
    "# does our model know where Paris is?\n",
    "import torch\n",
    "\n",
    "base_prompt = \"Paris is in the country of\"\n",
    "\n",
    "with torch.no_grad():\n",
    "    with model.trace(base_prompt) as tracer:\n",
    "        base_tokens = tracer.invoker.inputs[0][0]['input_ids'][0]\n",
    "        # Get logits from the lm_head\n",
    "        base_logits = model.lm_head.output[:, -1, :].save()\n",
    "\n",
    "base_logprobs = torch.softmax(base_logits, dim=-1)\n",
    "\n",
    "top_completions = torch.topk(base_logprobs, 3, sorted=True)\n",
    "for v, i in zip(top_completions.values[0], top_completions.indices[0]):\n",
    "    print(f'{model.tokenizer.decode(i.item())} ({v.item():.2f})')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76e34df5",
   "metadata": {},
   "source": [
    "Looks like our model knows that Paris is in France. Now let's make the model think that Paris is elsewhere! We can do this by **editing** the model's representation of Paris during its computation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c117b283",
   "metadata": {},
   "source": [
    "![two forward runs of a model, with an arrow between the residual stream activations of Rio and Paris. After the intervention is applied, the model outputs Brazil](https://github.com/AmirZur/nnsight-tutorials/blob/main/figures/patching_visualization.png?raw=true)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d27859f",
   "metadata": {},
   "source": [
    "See the tutorial on <a href=\"https://nnsight.net/notebooks/tutorials/activation_patching/\">activation patching</a> for more details!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e11882a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# collect representations for a city from a different country\n",
    "source_prompt = \"Rio is in the country of\"\n",
    "source_country = model.tokenizer(\" Brazil\")[\"input_ids\"][1] # includes a space\n",
    "\n",
    "with torch.no_grad():\n",
    "    with model.trace(source_prompt) as tracer:\n",
    "        source_tokens = tracer.invoker.inputs[0][0]['input_ids'][0]\n",
    "        # Get hidden states of all layers in the network.\n",
    "        # We index the output at 0 because it's a tuple where the first index is the hidden state.\n",
    "        source_hidden_states = [\n",
    "            layer.output[0].save()\n",
    "            for layer in model.model.layers\n",
    "        ]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91a4afda",
   "metadata": {},
   "source": [
    "This will take 1-2min, since we're going through all layers and tokens in our prompt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "05b58ac7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# activation patching intervention\n",
    "patching_results = []\n",
    "\n",
    "# iterate through all the layers\n",
    "for layer_idx in range(len(model.model.layers)):\n",
    "    patching_results_per_layer = []\n",
    "\n",
    "    # iterate through all tokens\n",
    "    for token_idx in range(len(base_tokens)):\n",
    "        with model.trace(base_prompt) as tracer:\n",
    "            # apply the patch from the source hidden states to the base hidden states\n",
    "            model.model.layers[layer_idx].output[0][:, token_idx, :] = \\\n",
    "                source_hidden_states[layer_idx][:, token_idx, :]\n",
    "\n",
    "            patched_logits = model.lm_head.output[:, -1, :]\n",
    "\n",
    "            patched_logprobs = torch.softmax(patched_logits, dim=-1)\n",
    "\n",
    "            patching_results_per_layer.append(patched_logprobs[0, source_country].item().save())\n",
    "\n",
    "    patching_results.append(patching_results_per_layer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "881206fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.express as px\n",
    "from nnsight.tracing.graph import Proxy\n",
    "\n",
    "def plot_patching_results(\n",
    "    patching_results,\n",
    "    base_tokens,\n",
    "    source_tokens\n",
    "):\n",
    "    # get values from proxy variables\n",
    "    patching_results = nnsight.util.apply(patching_results, lambda x: x.value, Proxy)\n",
    "\n",
    "    fig = px.imshow(\n",
    "        patching_results,\n",
    "        color_continuous_midpoint=0.0,\n",
    "        color_continuous_scale=\"RdBu\",\n",
    "        labels={\"x\": \"token\", \"y\": \"layer\",\"color\":\"counterfactual logit\"},\n",
    "        x=[f\"<span style=\\\"color: #156082\\\">{b}</span><br></br><span style=\\\"color: #E97132\\\">{s}</span>\" for b, s in zip(base_tokens, source_tokens)]\n",
    "    )\n",
    "\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d392f460",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "coloraxis": "coloraxis",
         "hovertemplate": "token: %{x}<br>layer: %{y}<br>counterfactual logit: %{z}<extra></extra>",
         "name": "0",
         "type": "heatmap",
         "x": [
          "<span style=\"color: #156082\"><|begin_of_text|></span><br></br><span style=\"color: #E97132\"><|begin_of_text|></span>",
          "<span style=\"color: #156082\">Paris</span><br></br><span style=\"color: #E97132\">Rio</span>",
          "<span style=\"color: #156082\"> is</span><br></br><span style=\"color: #E97132\"> is</span>",
          "<span style=\"color: #156082\"> in</span><br></br><span style=\"color: #E97132\"> in</span>",
          "<span style=\"color: #156082\"> the</span><br></br><span style=\"color: #E97132\"> the</span>",
          "<span style=\"color: #156082\"> country</span><br></br><span style=\"color: #E97132\"> country</span>",
          "<span style=\"color: #156082\"> of</span><br></br><span style=\"color: #E97132\"> of</span>"
         ],
         "xaxis": "x",
         "yaxis": "y",
         "z": {
          "bdata": "AAAAAI+dNz8AAAAA3aXmPwAAAADl4To/AAAAgH/zNz8AAACgVd83PwAAAMDDqDU/AAAAgD3jNz8AAAAAj503PwAAAOBeMec/AAAAAI25Oj8AAAAgvVU3PwAAAKByqDc/AAAAIOaHNz8AAACAuFw6PwAAAACPnTc/AAAAIJeN5j8AAAAgk4A5PwAAAABP2DU/AAAAwKblNj8AAABgi1I8PwAAAEAJZzo/AAAAAI+dNz8AAAAAN1LjPwAAAGDNKkM/AAAAAP8NNj8AAAAgRac3PwAAAIA+Iz4/AAAAwNQJPj8AAAAAj503PwAAAMBXyuQ/AAAAwEfkZD8AAACg0N84PwAAAOAVezY/AAAAYBHNPD8AAADgcMZGPwAAAACPnTc/AAAAALXt5D8AAAAAc39lPwAAAGDN8js/AAAA4MVXNz8AAACgkqo8PwAAAAB7Cko/AAAAAI+dNz8AAABAPtHjPwAAAEAbKVI/AAAAILoSPD8AAABANXs5PwAAAGBsSzA/AAAAgKY7TT8AAAAAj503PwAAAED6auM/AAAAoFmOSz8AAACAKfU6PwAAACDl4jg/AAAAAFJWMj8AAADgCS5SPwAAAACPnTc/AAAAQAh84z8AAADg+vlIPwAAAGAvpjo/AAAAoFeNOT8AAAAgrWA5PwAAAKBJs2I/AAAAAI+dNz8AAABA5IZ5PwAAAEB6E0o/AAAAIGaJRj8AAADA8VdFPwAAAGC9hTs/AAAAAD7V0j8AAAAAj503PwAAAMDqZXc/AAAAAIF6Rz8AAADg+jhIPwAAAGBexkU/AAAAgGwuPT8AAACgQMbTPwAAAACPnTc/AAAAYC6UZD8AAADAzPlEPwAAAIBjfkY/AAAAAI41RD8AAADg8Ts6PwAAAMA4keA/AAAAAI+dNz8AAADAzydjPwAAAMBFH0U/AAAAwB9uRj8AAABAMilEPwAAAKAr6Do/AAAAQMbw4D8AAAAAj503PwAAAADTykQ/AAAAwGg+RD8AAABgeIJFPwAAAADDPkI/AAAAYBEqOz8AAABAyJvkPwAAAACPnTc/AAAAIH8USj8AAAAAgrhDPwAAAEAdpUQ/AAAAoAJlQT8AAABg3y87PwAAAKBZsOM/AAAAAI+dNz8AAAAAj503PwAAAACPnTc/AAAAAI+dNz8AAAAAj503PwAAAACPnTc/AAAAwCCB5T8=",
          "dtype": "f8",
          "shape": "16, 7"
         }
        }
       ],
       "layout": {
        "coloraxis": {
         "cmid": 0,
         "colorbar": {
          "title": {
           "text": "counterfactual logit"
          }
         },
         "colorscale": [
          [
           0,
           "rgb(103,0,31)"
          ],
          [
           0.1,
           "rgb(178,24,43)"
          ],
          [
           0.2,
           "rgb(214,96,77)"
          ],
          [
           0.3,
           "rgb(244,165,130)"
          ],
          [
           0.4,
           "rgb(253,219,199)"
          ],
          [
           0.5,
           "rgb(247,247,247)"
          ],
          [
           0.6,
           "rgb(209,229,240)"
          ],
          [
           0.7,
           "rgb(146,197,222)"
          ],
          [
           0.8,
           "rgb(67,147,195)"
          ],
          [
           0.9,
           "rgb(33,102,172)"
          ],
          [
           1,
           "rgb(5,48,97)"
          ]
         ]
        },
        "margin": {
         "t": 60
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "xaxis": {
         "anchor": "y",
         "constrain": "domain",
         "domain": [
          0,
          1
         ],
         "scaleanchor": "y",
         "title": {
          "text": "token"
         }
        },
        "yaxis": {
         "anchor": "x",
         "autorange": "reversed",
         "constrain": "domain",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "layer"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "decoded_base_tokens = [model.tokenizer.decode(token) for token in base_tokens]\n",
    "decoded_source_tokens = [model.tokenizer.decode(token) for token in source_tokens]\n",
    "\n",
    "plot_patching_results(patching_results, decoded_base_tokens, decoded_source_tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a37473d0",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#C1E5F5;padding:10px 10px;border-radius:20px\">\n",
    "<b>Takeaway</b>\n",
    "\n",
    "Look at the plot above. What can you tell from it about where the model represents the country of Paris?\n",
    "\n",
    "Notice how changing the model's activations over the Paris token makes a different up until a certain layer. However, once we hit that layer, the information immediately gets transferred to the last token in the prompt.\n",
    "\n",
    "It's likely then that the model \"read\" the country information of Paris around **Layer 8**. We'll focus the rest of our analysis on this layer.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "458b8e70",
   "metadata": {},
   "source": [
    "## Our Challenge - disentangling concepts in a model's representations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f205c94",
   "metadata": {},
   "source": [
    "Our patching experiments did the job! By swapping 8th layer's activation for the Paris token with the activation for Rio, we successfully changed the country in question from France to Brazil.\n",
    "\n",
    "But **how can we be sure that it's really the country that we edited?** It's actually much likelier that we changed the **entire city in question**. If we ask the model follow-up questions, we'll see that we changed not only the country that Paris is in, but also its continent, language, food, and other concepts that we didn't look for..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "08611cda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " South (0.55)\n",
      " America (0.11)\n",
      " North (0.10)\n"
     ]
    }
   ],
   "source": [
    "# by changing Paris's country, we also changed its continent!\n",
    "TOKEN_INDEX = 1\n",
    "LAYER_INDEX = 8\n",
    "\n",
    "new_base_prompt = \"Paris is in the continent of\"\n",
    "\n",
    "with model.trace(new_base_prompt) as tracer:\n",
    "    # apply the same patch we did before\n",
    "    model.model.layers[LAYER_INDEX].output[0][:, TOKEN_INDEX, :] = \\\n",
    "        source_hidden_states[LAYER_INDEX][:, TOKEN_INDEX, :]\n",
    "\n",
    "    patched_logits = model.lm_head.output[:, -1, :]\n",
    "\n",
    "    patched_logprobs = torch.softmax(patched_logits, dim=-1).save()\n",
    "\n",
    "top_completions = torch.topk(patched_logprobs, 3, sorted=True)\n",
    "for v, i in zip(top_completions.values[0], top_completions.indices[0]):\n",
    "    print(f'{model.tokenizer.decode(i.item())} ({v.item():.2f})')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "af3e4e1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Portuguese (0.57)\n",
      " Spanish (0.12)\n",
      " English (0.10)\n"
     ]
    }
   ],
   "source": [
    "# as well as its language!\n",
    "new_base_prompt = \"Paris is a city whose main language is\"\n",
    "\n",
    "with model.trace(new_base_prompt) as tracer:\n",
    "    # apply the same patch we did before\n",
    "    model.model.layers[LAYER_INDEX].output[0][:, TOKEN_INDEX, :] = \\\n",
    "        source_hidden_states[LAYER_INDEX][:, TOKEN_INDEX, :]\n",
    "\n",
    "    patched_logits = model.lm_head.output[:, -1, :]\n",
    "\n",
    "    patched_logprobs = torch.softmax(patched_logits, dim=-1).save()\n",
    "\n",
    "top_completions = torch.topk(patched_logprobs, 3, sorted=True)\n",
    "for v, i in zip(top_completions.values[0], top_completions.indices[0]):\n",
    "    print(f'{model.tokenizer.decode(i.item())} ({v.item():.2f})')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "480d8634",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#C1E5F5;padding:10px 10px;border-radius:20px\">\n",
    "<b>Takeaway</b>\n",
    "\n",
    "We did too much! \n",
    "\n",
    "While it's maybe not too surprising, when we intervene on the full residual stream over Paris, we edit more than just the country that it's in. But we know that the model must somehow access the country of Paris from its memory. Can we edit Paris's country without changing its continent or language?\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a44ec912",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#F2CFEE;padding:10px 10px;border-radius:20px\">\n",
    "<b>Want to know more?</b>\n",
    "\n",
    "Our example comes directly from the <a href=\"https://arxiv.org/abs/2402.17700\">RAVEL</a> dataset, which evaluates methods for disentangling language model representations. We won't explore the entire RAVEL dataset or methods evaluated in this tutorial, so we strongly encourage you to go check it out!\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc9c689f",
   "metadata": {},
   "source": [
    "## Looking Ahead - what's the right unit to patch?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19b2ac72",
   "metadata": {},
   "source": [
    "Our goal is to surgically edit the country of Paris without changing any of its other properties. What if by patching the entire residual stream activation we made too big of a cut?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c48a2a8",
   "metadata": {},
   "source": [
    "What are we actually patching? If we look at the residual stream, we see a list of numbers, which we can think of as a set of neurons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "25dfe61f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0111, -0.0206, -0.2613,  ..., -0.0281, -0.1300,  0.0346]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source_hidden_states[LAYER_INDEX][:, TOKEN_INDEX, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "acafb4f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 2048])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source_hidden_states[LAYER_INDEX][:, TOKEN_INDEX, :].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fdaf3c1",
   "metadata": {},
   "source": [
    "Can we intervene on just a handful of these neurons?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29a7265a",
   "metadata": {},
   "source": [
    "![patching the first 3 neurons of the activations of Rio and Paris](https://github.com/AmirZur/nnsight-tutorials/blob/main/figures/patching_neurons_visualization.png?raw=true)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "81c6d74e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " France (0.64)\n",
      " the (0.05)\n",
      " love (0.01)\n"
     ]
    }
   ],
   "source": [
    "# change the list of indices to try a set of neurons to patch!\n",
    "NEURON_INDICES = [0, 1, 2, 4]\n",
    "\n",
    "base_prompt = \"Paris is in the country of\"\n",
    "\n",
    "with model.trace(base_prompt) as tracer:\n",
    "    # Apply the patch from the source hidden states to the base hidden states\n",
    "    model.model.layers[LAYER_INDEX].output[0][:, TOKEN_INDEX, NEURON_INDICES] = \\\n",
    "        source_hidden_states[LAYER_INDEX][:, TOKEN_INDEX, NEURON_INDICES]\n",
    "\n",
    "    patched_logits = model.lm_head.output[:, -1, :]\n",
    "\n",
    "    patched_logprobs = torch.softmax(patched_logits, dim=-1).save()\n",
    "\n",
    "top_completions = torch.topk(patched_logprobs, 3, sorted=True)\n",
    "for v, i in zip(top_completions.values[0], top_completions.indices[0]):\n",
    "    print(f'{model.tokenizer.decode(i.item())} ({v.item():.2f})')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bb320e9",
   "metadata": {},
   "source": [
    "This didn't quite work - the first four neurons aren't enough to edit France's country.\n",
    "\n",
    "We can try to search over the neurons in the residual stream, but individual neurons are likely too small to make a difference, and there are far too many sets of neurons to search through..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47288eeb",
   "metadata": {},
   "source": [
    "In the next section, we'll think about a different unit of computation - a **linear subspace** in the model - and go through a method that automatically searches for the linear subspace that represents the concept we're looking for. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ec6e76b",
   "metadata": {},
   "source": [
    "<div style=\"background-color:#F2CFEE;padding:10px 10px;border-radius:20px\">\n",
    "<b>Want to know more?</b>\n",
    "\n",
    "Although we left it at \"there are too many sets of neurons to search through\", there actually is a method for automatically selecting a subset of neurons!\n",
    "The method uses a differentiable binary mask (DBM) to find the right set of neurons to intervene on.\n",
    "\n",
    "In the next section we'll go over DAS, whose search space encompasses DBM and which performs better on the RAVEL dataset.\n",
    "\n",
    "While we won't cover DBM in this tutorial, we strongly encourage you to <a href=\"https://dcm.baulab.info/\">check it out</a>!\n",
    "\n",
    "</div>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ndif",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.23"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
