{"cells":[{"cell_type":"markdown","metadata":{"id":"-Pj-wkVtjoh3"},"source":["# Setting"]},{"cell_type":"markdown","metadata":{"id":"LqGLYAXLvaFT"},"source":["## Summary"]},{"cell_type":"markdown","metadata":{"id":"px79darWwAqX"},"source":["Setting is how you can intervene on a model and edit information as it flows throughout its computations."]},{"cell_type":"markdown","metadata":{"id":"8Vlw-K5KR9vj"},"source":["```python\n","with net.trace(input):\n","\n","  # setting all output values to 0\n","  net.layer1.output[:] = 0\n","\n","  l2_inp = net.layer2.inputs.save()\n","\n","assert torch.equal(l2_inp == 0)\n","```"]},{"cell_type":"markdown","metadata":{"id":"ikaUcrWwvayI"},"source":["## When to Use\n","\n"]},{"cell_type":"markdown","metadata":{"id":"dHjytGJKwB5x"},"source":["Setting is used when making interventions on the model, like during activation patching."]},{"cell_type":"markdown","metadata":{"id":"yDZg6zjTvdAj"},"source":["## How to Use"]},{"cell_type":"markdown","metadata":{"id":"nNqEW-PIjoh6"},"source":["We often not only want to see whats happening during computation, but also to intervene and edit the flow of information in a model. We do this with the setting (`=`) operation.\n","\n","There are two ways to perform setting in NNsight: in-place, and not in-place:\n","\n","*   **In-place** setting operations change the values of the tensor that the targeted output for the module is referencing (which has downstream implications for gradient operations!). In NNsight, in-place setting of a module's value would look like `model.<module_path>.output[:] = new_tensor[:]`.\n","*   **Not in-place** setting operations assign a new tensor to the module instead of changing the values of the current tensor. In NNsight, not in-place setting of a module's value would look like `model.<module_path>.output = new_tensor`.\n","\n","This is no different than standard Python syntax, just worth mentioning both are effective. Some objects are immutable (`tuples`) and would have to be replaced outright instead of in-place.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"LZjXgt046TV4"},"source":["### In-place setting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1755274808812,"user":{"displayName":"Jaden Fiotto-Kaufman","userId":"01810024908911398572"},"user_tz":240},"id":"1drizr7vw_kH","outputId":"41ba2799-e341-4813-b0d6-85607c26fbe3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Before: tensor([[ 0.5857,  0.2823, -0.0138, -0.4004,  0.0133, -0.5596,  0.1553,  0.1798,\n","         -0.4834,  0.2742]])\n","After: tensor([[ 0.0000,  0.2823, -0.0138, -0.4004,  0.0133, -0.5596,  0.1553,  0.1798,\n","         -0.4834,  0.2742]])\n"]}],"source":["with tiny_model.trace(input):\n","\n","    # Save the output before the edit to compare.\n","    # Notice we apply .clone() before saving as the setting operation is in-place.\n","    l1_output_before = tiny_model.layer1.output.clone().save()\n","\n","    # Access the 0th index of the hidden state dimension and set it to 0.\n","    tiny_model.layer1.output[:,0] = 0\n","\n","    # Save the output after to see our edit.\n","    l1_output_after = tiny_model.layer1.output.save()\n","\n","print(\"Before:\", l1_output_before)\n","print(\"After:\", l1_output_after)"]},{"cell_type":"markdown","metadata":{"id":"_lR5r3DC8Dsg"},"source":["### Not in-place setting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1755274808840,"user":{"displayName":"Jaden Fiotto-Kaufman","userId":"01810024908911398572"},"user_tz":240},"id":"5MNy7P4B8IWr","outputId":"b0102192-6e12-43c9-df4a-8ec9ff2129c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Before: tensor([[ 0.5857,  0.2823, -0.0138, -0.4004,  0.0133, -0.5596,  0.1553,  0.1798,\n","         -0.4834,  0.2742]])\n","After: tensor([[ 0.0000,  0.2823, -0.0138, -0.4004,  0.0133, -0.5596,  0.1553,  0.1798,\n","         -0.4834,  0.2742]])\n"]}],"source":["with tiny_model.trace(input):\n","\n","    # Save the output before the edit to compare.\n","    # No need to apply .clone() before saving, as we are not setting in-place.\n","    l1_output_before = tiny_model.layer1.output.save()\n","\n","    edited_tensor = tiny_model.layer1.output.clone().save()\n","    edited_tensor[:, 0] = 0\n","\n","    # Set the layer1 output equal to the edited tensor\n","    tiny_model.layer1.output = edited_tensor\n","\n","    # Save the output after to see our edit.\n","    l1_output_after = tiny_model.layer1.output.save()\n","\n","print(\"Before:\", l1_output_before)\n","print(\"After:\", l1_output_after)"]},{"cell_type":"markdown","metadata":{"id":"xhgYSWZCe524"},"source":["# Order Matters\n","\n","In NNsight, your intervention code is ran serially alongside the model's normal execution. Therefore the order you interact with modules must match the order those modules are called in the original underlying model.\n","\n","For our tiny model above, if I wanted to interact with both layer1 and layer2, I must do layer1 first. In this example I make the mistake of doing layer 2 first, resulting in an `OutOfOrderError`:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":651},"executionInfo":{"elapsed":255,"status":"error","timestamp":1755274809097,"user":{"displayName":"Jaden Fiotto-Kaufman","userId":"01810024908911398572"},"user_tz":240},"id":"Gz758gHUftff","outputId":"6d8cee27-ea33-419f-ec86-0fa528e1a474"},"outputs":[{"ename":"NNsightException","evalue":"\n\nTraceback (most recent call last):\n  File \"/tmp/ipython-input-4160868438.py\", line 5, in <cell line: 0>\n    l1_output = tiny_model.layer1.output.save()\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/envoy.py\", line 152, in output\n    return self._interleaver.current.request(\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/interleaver.py\", line 781, in request\n    value = self.send(Events.VALUE, requester)\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/interleaver.py\", line 766, in send\n    raise response\n\nOutOfOrderError: Value was missed for model.layer1.output.i0. Did you call an Envoy out of order?","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNNsightException\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-4160868438.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mtiny_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0ml2_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtiny_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0ml1_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtiny_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/nnsight/intervention/tracing/base.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, exc_type, exc_val, exc_tb)\u001b[0m\n\u001b[1;32m    414\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m             \u001b[0;31m# Execute the traced code using the configured backend\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/nnsight/intervention/backends/execution.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, tracer)\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mwrap_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtracer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0mGlobals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNNsightException\u001b[0m: \n\nTraceback (most recent call last):\n  File \"/tmp/ipython-input-4160868438.py\", line 5, in <cell line: 0>\n    l1_output = tiny_model.layer1.output.save()\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/envoy.py\", line 152, in output\n    return self._interleaver.current.request(\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/interleaver.py\", line 781, in request\n    value = self.send(Events.VALUE, requester)\n  File \"/usr/local/lib/python3.11/dist-packages/nnsight/intervention/interleaver.py\", line 766, in send\n    raise response\n\nOutOfOrderError: Value was missed for model.layer1.output.i0. Did you call an Envoy out of order?"]}],"source":["with tiny_model.trace(input):\n","\n","    l2_output = tiny_model.layer2.output.save()\n","\n","    l1_output = tiny_model.layer1.output.save()\n","\n","print(\"Layer1:\", l1_output)\n","print(\"Layer2:\", l2_output)"]},{"cell_type":"markdown","metadata":{},"source":["## Related\n","*   Getting"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"ndif","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":0}
