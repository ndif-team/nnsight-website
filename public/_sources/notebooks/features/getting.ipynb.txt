{"cells":[{"cell_type":"markdown","metadata":{"id":"6E2yG0_Fi9s3"},"source":["# Getting"]},{"cell_type":"markdown","metadata":{"id":"4ylPlq3gji7e"},"source":["## Summary\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rDDgZvA5wDeg"},"source":["NNsight gets values from model internals by accessing module inputs or outputs and assigning them to a variable.\n","\n","You can get model intermediate values within the tracing context by calling `.output` or `.input` on your module of interest and assigning it to a variable. If you want to access defined values after exiting the tracing context, you need to call `.save()`."]},{"cell_type":"markdown","metadata":{"id":"PIc1k0MUT-5b"},"source":["```python\n","# capturing interventions\n","with model.trace(input): # enter the tracing context\n","    k_layer_output = model.layer[k].output[0].save() # access the output of layer[k] and save for later use\n","```"]},{"cell_type":"markdown","metadata":{"id":"zuaM3WvAjtzB"},"source":["## When to Use"]},{"cell_type":"markdown","metadata":{"id":"5OghKad6wElK"},"source":["Getting values is one of the most fundamental operations within NNsight. You will use this whenever you would like to access a hidden state within a model's forward pass, such as activations."]},{"cell_type":"markdown","metadata":{"id":"DA4YKPf3jx4v"},"source":["## How to Use"]},{"cell_type":"markdown","metadata":{"id":"jnIE8ffqi9tC"},"source":["Hidden states are exposed in NNsight by accessing the desired module and calling its input or output attributes.\n","\n","The input and output attributes can be accessed by calling `.input` or `.output` on a module (can also use `.inputs` or `.outputs`, which return more detailed information).\n","\n","<details>\n","<summary>Note: .input/.output vs .inputs/.outputs</summary>\n","\n","The `.inputs` and `.outputs` attributes return tuples of a tuple and a dictionary with the positional and keyword arguments `((args),{kwargs})`, respectively.\n","\n","On the other hand, `.input` and `.output` attributes return the first argument, which is usually positional. If there are only keyword arguments, then `.input` would return the first keyword. So, `.input` is equivalent to `.inputs[0][0]`.\n","\n","</details>\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wH2HnqBlXOB2"},"source":["Values defined within the tracing context are automatically deleted upon exiting the context, so you need to save variables that you plan to use later with `.save()`. Calling `.save()` on a variable ensures its value persists after exiting the tracing context."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"piYIaxwzi9tD","outputId":"5bbbd664-8f2c-4f59-dfb6-6eb368f07e01"},"outputs":[],"source":["with model.trace(\"The Eiffel Tower is in the city of\") as tracer:\n","\n","    hidden_states = model.transformer.h[-1].output[0].save()"]},{"cell_type":"markdown","metadata":{"id":"toUBiJi0i9tH"},"source":["After exiting the tracing context, the `.value` attribute of the `hidden_states` object will be populated."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I8O0o_nFi9tI","outputId":"e69acf6e-f2ca-4417-c3d4-0e4b81e22983"},"outputs":[{"name":"stdout","output_type":"stream","text":["tensor([[[ 0.0505, -0.1728, -0.1690,  ..., -1.0096,  0.1280, -1.0687],\n","         [ 8.7495,  2.9057,  5.3024,  ..., -8.0418,  1.2964, -2.8677],\n","         [ 0.2960,  4.6686, -3.6642,  ...,  0.2391, -2.6064,  3.2263],\n","         ...,\n","         [ 2.1537,  6.8917,  3.8651,  ...,  0.0588, -1.9866,  5.9188],\n","         [-0.4460,  7.4285, -9.3065,  ...,  2.0528, -2.7946,  0.5556],\n","         [ 6.6286,  1.7258,  4.7969,  ...,  7.6714,  3.0682,  2.0481]]],\n","       device='mps:0', grad_fn=<AddBackward0>)\n"]}],"source":["print(hidden_states)"]},{"cell_type":"markdown","metadata":{"id":"brsGwmGmj420"},"source":["## Related\n"]},{"cell_type":"markdown","metadata":{"id":"AutS2XhwwGO-"},"source":["*   Setting\n"]}],"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"display_name":"ndif","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":0}
